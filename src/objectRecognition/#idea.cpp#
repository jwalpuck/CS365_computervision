// A function to get the pixel locations for items in the region
int *getRegionLocations( cv::Mat &boundingBox, cv::Mat &regMap, int idx ){
  // This might be better to return a list of points   
  int tempx, tempy;
  tempx = boundingBox.at<int>(idx, 3) - boundingBox.at<int>(idx, 1);
  tempy = boundingBox.at<int>(idx, 2) - boundingBox.at<int>(idx, 0);  

  // create a list of points that are in the region
  int *regionIdxs = (int *)malloc(sizeof( int ) * tempx * tempy * 2);

  int x = 0;
  int y = 0; 
  for( int i = 0; i < (tempx * tempy) - 1; i++){
    regionIdxs[i * 2] = x + boundingBox.at<int>(idx, 1);
    regionIdxs[i * 2 + 1] = y + boundingBox.at<int>(idx, 0);

    if( debug ){
      printf("boxStartX: %d boxStartY: %d boxEndX: %d boxEndY: %d x: %d y: %d \n",boundingBox.at<int>(idx, 1), boundingBox.at<int>(idx, 0), boundingBox.at<int>(idx, 3), boundingBox.at<int>(idx, 2) ,regionIdxs[i*2], regionIdxs[i*2+1]);
    }

    // this increments the row and column counters to get the correct positions
    if( i%tempx == 0 ){
      x++;
      y = 0;
    }else{
      y++;
    }
  }
  return( regionIdxs );
}

cv::Mat transformPoints( cv::Mat &pixelIds, cv::Mat &boundingBox, cv::Mat &centroid, cv::Mat &regMap, float centralAxisAngle, int idx ){
  int area; 
  cv::Mat  final, translationMat, transposePoints, result, resultFinal;
  double minVal, maxVal;
  cv::Point minPt, maxPt;
  
  float eCos = cos( centralAxisAngle );
  float eSin = sin( centralAxisAngle );

  printf(" Sin: %f  Cos: %f\n", eSin, eCos );
  
  cv::transpose( pixelIds, transposePoints );
  if( debug ){
    printf("P: %d %d \n", (int)pixelIds.size().height, (int)pixelIds.size().width);
    printf("PT: %d %d \n", (int)transposePoints.size().height, (int)transposePoints.size().width);
  }

  // Create the 2 needed matrices 
  translationMat = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, CV_64FC1);
  final = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, transposePoints.type());

  // Translate
  for( int i = 0; i < transposePoints.size().width; i++){
    translationMat.at<float>(0, i) = pixelIds.at<float>(i, 0) - centroid.at<int>(idx, 1 );
    translationMat.at<float>(1, i) = pixelIds.at<float>(i, 1) - centroid.at<int>(idx, 0 );
    
    if(debug)
      printf("T x: %f y: %f \n", translationMat.at<float>(0 ,i), translationMat.at<float>(1, i));
  }
  
  // Rotate     
  for(int i = 0; i < (int)transposePoints.size().width; i++){
    final.at<float>(0, i) = eCos * translationMat.at<float>(0,i) + -1 * eSin * translationMat.at<float>(1,i);
    final.at<float>(1, i) = eSin * translationMat.at<float>(0,i) + eCos * translationMat.at<float>(1,i);
    if(debug){
      printf("R2 x: %f y: %f \n", final.at<float>(0 ,i), final.at<float>(1, i));
    }
  }

  // Move back to original coords. 
  result.create( 2, 2, CV_64FC1);
  resultFinal.create( 2, 2, CV_64FC1);
  cv::minMaxLoc( final, &minVal, &maxVal, &minPt, &maxPt );
  //if( debug ){
    printf("%f %f \n", final.at<float>(0, maxPt.x), final.at<float>(1, maxPt.x));
    printf("%f %f \n", final.at<float>(0, minPt.x), final.at<float>(1, minPt.x));
    //}
  
  // Rotate Back
  resultFinal.at<float>(0, 0) = final.at<float>(0, minPt.x) * eSin + final.at<float>(1, minPt.x) * eCos;
  resultFinal.at<float>(1, 0) = final.at<float>(0, minPt.x) * eCos + final.at<float>(1, minPt.x) * -1 * eSin;
  resultFinal.at<float>(0, 1) = final.at<float>(0, maxPt.x) * eSin + final.at<float>(1, maxPt.x) * eCos;
  resultFinal.at<float>(1, 1) = final.at<float>(0, maxPt.x) * eCos + final.at<float>(1, maxPt.x) * -1 * eSin;

  // Translate Back: put in N x 2 matrix
  result.at<float>(0, 0) = resultFinal.at<float>(0, 0) + centroid.at<int>(idx, 1);
  result.at<float>(0, 1) = resultFinal.at<float>(1, 0) + centroid.at<int>(idx, 0);
  result.at<float>(1, 0) = resultFinal.at<float>(0, 1) + centroid.at<int>(idx, 1);
  result.at<float>(1, 1) = resultFinal.at<float>(1, 1) + centroid.at<int>(idx, 0);

  
  return( result );
}

// M00
// Need to count pixels in the region in the 
int numPixelsInBB( cv::Mat &boundingBox, cv::Mat &regMap, int idx ){
  int count = 0;
  for( int i = 0; i< regMap.size().height; i++){
    for( int j = 0; j < regMap.size().width; j++){
      if( i > boundingBox.at<int>(idx,1) && i < boundingBox.at<int>(idx, 3)
	  && j > boundingBox.at<int>(idx, 0) && j < boundingBox.at<int>(idx, 2)){
	if( regMap.at<int>(i, j)  == idx ){
	  count ++;
	}
      }
    }
  }
  if( debug ){
    float area; 
    area = bbArea( boundingBox, idx ); 
    printf("count: %d should be less than area %f\n", count, area );
  }
  return( count );
}

// A function to get the pixel locations for items in the region
cv::Mat getRegionLocations( cv::Mat &boundingBox, cv::Mat &regMap, int idx ){
  // This might be better to return a list of points   
  int numPoints = numPixelsInBB( boundingBox, regMap, idx);
  int count = 0;
  printf("%d numPoints \n", numPoints );
  
  // create a list of points that are in the region
  cv::Mat regionIdxs; 
  regionIdxs = cv::Mat::zeros( numPoints, 2, CV_64FC1);
  
  if( numPoints == 0 ){
    printf(" There is no object in the frame \n");
    exit( -1 );
  }
 
  // Get the index places for points in the bounding box region
  for( int i = 0; i < regMap.size().height; i++){
    for( int j = 0; j < regMap.size().width; j++){
      if( i > boundingBox.at<int>(idx,1) && i < boundingBox.at<int>(idx, 3)
	  && j > boundingBox.at<int>(idx, 0) && j < boundingBox.at<int>(idx, 2)
	  && regMap.at<int>(i, j) == idx){
	regionIdxs.at<float>(count, 0) = i;
	regionIdxs.at<float>(count, 1) = j;
	if( debug ){
	  printf(" numPoints: %d count: %d x: %f y: %f \n",numPoints, count, regionIdxs.at<float>(count, 0), regionIdxs.at<float>(count,1));
	}
	count ++ ;
      }
    }
  }
  return( regionIdxs );
}

// Compute mu11 
float getCentralMoment( cv::Mat &pixelIds, cv::Mat &centroids, int idx ){
  float result = 0;
  float tempX, tempY = 0;
  // the sum of the distances between the centroids and all other pointsin the region
  for( int i = 0; i < pixelIds.size().height; i++){
    tempY = centroids.at<int>(idx, 0) - pixelIds.at<float>(i,1); // y
    tempX = pixelIds.at<float>(i,0) - centroids.at<int>(idx, 1); // x
    result += tempX * tempY;
  }
  return( result );
}

// compute mu02 if type == 1
// compute mu20 if type == 0
float get2ndOrderMoment(cv::Mat &pixelIds, cv::Mat &boundingBox, cv::Mat &centroids, cv::Mat &regMap, int idx, int type ){
  float area;
  //  area =  numPixelsInBB( boundingBox, regMap, idx);
  float result = 0;
  float temp; 
  for( int i = 0; i < pixelIds.size().height; i++){
    if( type == 0 ){
      temp = pixelIds.at<float>(i,0) - centroids.at<int>(idx, 1); // x
    }else if( type == 1){
      temp = centroids.at<int>(idx, 0) - pixelIds.at<float>(i,1); // y
    }
    result += (temp * temp); 
  }
  return( result );
}



// TRANSLATE THEN ROTATE
cv::Mat transformPoints( cv::Mat &pixelIds, cv::Mat &boundingBox, cv::Mat &centroid, float centralAxisAngle, int idx ){
  float area = bbArea( boundingBox, idx);
  cv::Mat  final, translationMat, transposePoints, result, resultFinal;
  double minVal, maxVal;
  cv::Point minPt, maxPt; 
  
  float eCos = cos( centralAxisAngle );
  float eSin = sin( centralAxisAngle );

  cv::Mat rotation;
  rotation.create( 2, 2, CV_64FC1);
  rotation.at<float>(0, 0) = eCos;
  rotation.at<float>(0, 1) = eSin;
  rotation.at<float>(1, 0) = eSin;
  rotation.at<float>(1, 1) = eCos;

  cv::transpose( pixelIds, transposePoints );
 printf( " %f %f %f %f \n", rotation.at<float>(0,0), rotation.at<float>(0,1), rotation.at<float>(1,0), rotation.at<float>(1,1));
  if( debug ){
    printf( " %f %f %f %f \n", rotation.at<float>(0,0), rotation.at<float>(0,1), rotation.at<float>(1,0), rotation.at<float>(1,1));
    printf("R: %d %d \n", (int)rotation.size().height, (int)rotation.size().width);
    printf("P: %d %d \n", (int)pixelIds.size().height, (int)pixelIds.size().width);
    printf("PT: %d %d \n", (int)transposePoints.size().height, (int)transposePoints.size().width);
  }

  // Create the 2 needed matrices 
  translationMat = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, CV_64FC1);
  final = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, transposePoints.type());

  // Translate
  for( int i = 0; i < transposePoints.size().width; i++){
    translationMat.at<float>(0, i) = pixelIds.at<float>(i, 0) - centroid.at<int>(idx, 1 );
    translationMat.at<float>(1, i) = pixelIds.at<float>(i, 1) - centroid.at<int>(idx, 0 );
    
    if(debug)
      printf("T x: %f y: %f \n", translationMat.at<float>(0 ,i), translationMat.at<float>(1, i));
  }
  
  // Rotate     
  for(int i = 0; i < (int)transposePoints.size().width; i++){
    final.at<float>(0, i) = eCos * translationMat.at<float>(0,i) + eSin * translationMat.at<float>(1,i);
    final.at<float>(1, i) = eSin * translationMat.at<float>(0,i) + eCos * translationMat.at<float>(1,i);
    if(debug){
      printf("R2 x: %f y: %f \n", final.at<float>(0 ,i), final.at<float>(1, i));
    }
  }

  result.create( 2, 2, CV_64FC1);
  resultFinal.create( 2, 2, CV_64FC1);
  cv::minMaxLoc( final, &minVal, &maxVal, &minPt, &maxPt );
  if( debug ){
    printf("%f %f \n", final.at<float>(0, maxPt.x), final.at<float>(1, maxPt.x));
    printf("%f %f \n", final.at<float>(0, minPt.x), final.at<float>(1, minPt.x));
  }
  
  // Rotate Back
  resultFinal.at<float>(0, 0) = final.at<float>(0, minPt.x) * eSin + final.at<float>(1, minPt.x) * eCos;
  resultFinal.at<float>(1, 0) = final.at<float>(0, minPt.x) * eCos + final.at<float>(1, minPt.x) * eSin;
  resultFinal.at<float>(0, 1) = final.at<float>(0, maxPt.x) * eSin + final.at<float>(1, maxPt.x) * eCos;
  resultFinal.at<float>(1, 1) = final.at<float>(0, maxPt.x) * eCos + final.at<float>(1, maxPt.x) * eSin;

  // Translate Back
  result.at<float>(0, 0) = resultFinal.at<float>(0, 0) + centroid.at<int>(idx,1);
  result.at<float>(0, 1) = resultFinal.at<float>(1, 0) + centroid.at<int>(idx,0);
  result.at<float>(1, 0) = resultFinal.at<float>(0, 1) + centroid.at<int>(idx, 1);
  result.at<float>(1, 1) = resultFinal.at<float>(1, 1) + centroid.at<int>(idx, 0);
  
  return( result );
}

// ROTATE THEN TRANSLATE
/**cv::Mat transformPoints( cv::Mat &pixelIds, cv::Mat &boundingBox, cv::Mat &centroid, float centralAxisAngle, int idx ){
  float area = bbArea( boundingBox, idx);
  cv::Mat  final, translationMat, transposePoints, result, resultFinal;
  double minVal, maxVal;
  cv::Point minPt, maxPt; 
  
  float eCos = cos( centralAxisAngle );
  float eSin = sin( centralAxisAngle );

  cv::Mat rotation;
  rotation.create( 2, 2, CV_64FC1);
  rotation.at<float>(0, 0) = eCos;
  rotation.at<float>(0, 1) = eSin;
  rotation.at<float>(1, 0) = eSin;
  rotation.at<float>(1, 1) = eCos;

  cv::transpose( pixelIds, transposePoints );
 printf( " %f %f %f %f \n", rotation.at<float>(0,0), rotation.at<float>(0,1), rotation.at<float>(1,0), rotation.at<float>(1,1));
  if( debug ){
    printf( " %f %f %f %f \n", rotation.at<float>(0,0), rotation.at<float>(0,1), rotation.at<float>(1,0), rotation.at<float>(1,1));
    printf("R: %d %d \n", (int)rotation.size().height, (int)rotation.size().width);
    printf("P: %d %d \n", (int)pixelIds.size().height, (int)pixelIds.size().width);
    printf("PT: %d %d \n", (int)transposePoints.size().height, (int)transposePoints.size().width);
  }

  // Create the 2 needed matrices 
  translationMat = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, CV_64FC1);
  final = cv::Mat::zeros( transposePoints.size().height, transposePoints.size().width, transposePoints.type());

  // Rotate     
  for(int i = 0; i < (int)transposePoints.size().width; i++){
    translationMat.at<float>(0, i) = eCos * pixelIds.at<float>(i,0) + eSin * pixelIds.at<float>(i,1);
    translationMat.at<float>(1, i) = eSin * pixelIds.at<float>(i,0) + eCos * pixelIds.at<float>(i,1);

    if(debug)
      printf("T x: %f y: %f \n", translationMat.at<float>(0 ,i), translationMat.at<float>(1, i));
  }

  // Translate
  for( int i = 0; i < transposePoints.size().width; i++){
    final.at<float>(0, i) = translationMat.at<float>(0, i) - centroid.at<int>(idx, 1 );
    final.at<float>(1, i) = translationMat.at<float>(1,i) - centroid.at<int>(idx, 0 );

    if(debug){
      printf("%f %d %f %d \n", transposePoints.at<float>(0,i), centroid.at<int>(idx, 1), pixelIds.at<float>(i,1), centroid.at<int>(idx, 0));
      printf("R2 x: %f y: %f \n", final.at<float>(0 ,i), final.at<float>(1, i));
    }
  }

  result.create( 2, 2, CV_64FC1);
  resultFinal.create( 2, 2, CV_64FC1);
  cv::minMaxLoc( final, &minVal, &maxVal, &minPt, &maxPt );
  std::cout<< minPt.x<< " " << maxPt.x<< "\n";
  // printf("%f %f \n", final.at<float>(0, maxPt.x), final.at<float>(1, maxPt.x));
  // printf("%f %f \n", final.at<float>(0, minPt.x), final.at<float>(1, minPt.x));

  // Translate Back
  result.at<float>(0, 0) = final.at<float>(0, minPt.x) + centroid.at<int>(idx,1);
  result.at<float>(0, 1) = final.at<float>(1, minPt.x) + centroid.at<int>(idx,0);
  result.at<float>(1, 0) = final.at<float>(0, maxPt.x) + centroid.at<int>(idx, 1);
  result.at<float>(1, 1) = final.at<float>(1, maxPt.x) + centroid.at<int>(idx, 0);

  // Rotate Back
  resultFinal.at<float>(0, 0) = result.at<float>(0, 0) * eSin + result.at<float>(1, 0) * eCos;
  resultFinal.at<float>(1, 0) = result.at<float>(0, 0) * eCos + result.at<float>(1, 0) * eSin;
  resultFinal.at<float>(0, 1) = result.at<float>(1, 0) * eSin + result.at<float>(1, 1) * eCos;
  resultFinal.at<float>(1, 1) = result.at<float>(1, 0) * eCos + result.at<float>(1, 1) * eSin;
  
  return( resultFinal );
}
*/

